给定一个二叉树，计算整个树的坡度。
一个树的节点的坡度定义即为，该节点左子树的结点之和和右子树结点之和的差的绝对值。空结点的的坡度是0。
整个树的坡度就是其所有节点的坡度之和。
示例:
输入: 
         1
       /   \
      2     3
输出: 1
解释: 
结点的坡度 2 : 0
结点的坡度 3 : 0
结点的坡度 1 : |2-3| = 1
树的坡度 : 0 + 0 + 1 = 1

输入: 
         1
       /   \
      2     3
输出: 1
解释: 
   结点的坡度 2 : 0
   结点的坡度 3 : 0
   结点的坡度 1 : |2-3| = 1
   树的坡度 : 0 + 0 + 1 = 1
注意:
任何子树的结点的和不会超过32位整数的范围。
坡度的值不会超过32位整数的范围。


struct TreeNode {
	int val;
	TreeNode *left;
	TreeNode *right;
	TreeNode(int x) : val(x), left(NULL), right(NULL) {}

};
class Solution {
public:
	//**********************二叉树的坡度***************
	int findTilt(TreeNode* root) {
		if (root == NULL)
			return 0;
		return _findTilt(root) + findTilt(root->left) + findTilt(root->right);

	}
	//节点的普坡度，
	int _findTilt(TreeNode* root) 
	{
		if (root == NULL)
			return 0;
		int sum = 0;
		return abs(_Nodesum(root->left, sum)-_Nodesum(root->right, sum));

	}
	int _Nodesum(TreeNode* root, int& sum)
	{
		if (root == NULL)
			return 0;
		sum += root->val;
		sum += _Nodesum(root->left, sum);
		sum += _Nodesum(root->right, sum);
	}
};
