//定义栈的数据结构，实现一个能够得到栈最小元素的min函数

#include<stack>
class Solution {
public:

	stack<int> s;
	stack<int> s2;
	
	void push(int value) 
	{
		s.push(value);
	}
	void pop() 
	{
		s.pop();
	}
	int top() 
	{
		int temp = s.top();
		return temp;
	}
	//int size = s.size();
	
	int min()
	{
		int temp = 0;
		if (s.size() > 0)
		{
			int min = top();
			pop();
			s2.push(min);
			while (s.size() > 0)
			{
				temp = top();
				if (temp < min)
					min = temp;
				pop();
				s2.push(temp);
			}
			if (s.size() == 0 && s2.size())
			{
				while (s2.size())
				{
					s.push(s2.top());
					s2.pop();
				}
			}
			return min;
		}
		return 0;
	}
		
};
int main()
{
	int array[] = { 2, 2, 5, 3, 8, 9, 5 };
	Solution s;
	int size = sizeof(array) / sizeof(array[0]);
	for (int i = 0; i < size; i++)
	{
		s.push(array[i]);
	}

	cout << s.min() << endl;

	getchar();
	return 0;
}
