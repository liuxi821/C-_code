给定一个不含重复元素的整数数组。一个以此数组构建的最大二叉树定义如下：
二叉树的根是数组中的最大元素。
左子树是通过数组中最大值左边部分构造出的最大二叉树。
右子树是通过数组中最大值右边部分构造出的最大二叉树。
通过给定的数组构建最大二叉树，并且输出这个树的根节点。

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
        if(nums.empty())
            return NULL;
        TreeNode* root=_constructMaximumBinaryTree(nums, 0, nums.size()-1);
        return root;
    }
    TreeNode* _constructMaximumBinaryTree(vector<int>& v, int left, int right) 
    {
        if(left>right)
            return NULL;
        //找到此区间最大的值来构造一个节点
        int index=FindMax(v, left, right);
        int val=v[index];
        TreeNode* Node = new TreeNode(val);
        
        //[3 2 1 6 0 5]------index=6-------left->[3 2 1]------right->[0 5]
        Node->left=_constructMaximumBinaryTree(v, left, index-1); 
        Node->right=_constructMaximumBinaryTree(v, index+1, right);
        return Node;
    }
    //返回最大值的下标
    int FindMax(vector<int> v, int left,int right)
    {
        if(left>right)
            return -1;
        if(left==right)
            return left;
        for(int i=left,j=i+1;i<right;)
        {
            if(j<=right && v[i]<v[j])
            {
                i=j;
            }
            j++;
            if(j>right)
                return i;
        }
    }
};
